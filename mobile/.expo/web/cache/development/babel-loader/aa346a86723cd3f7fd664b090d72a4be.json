{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as Linking from \"expo-linking\";\nimport { useAppDispatch } from \"../app/hooks\";\nimport { setToken } from \"../features/user/userSlice\";\nexport default function Landing(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      input = _useState2[0],\n      setInput = _useState2[1];\n\n  var dispatch = useAppDispatch();\n  useEffect(function () {\n    Linking.addEventListener(\"url\", function (event) {\n      var _Linking$parse = Linking.parse(event.url),\n          path = _Linking$parse.path,\n          queryParams = _Linking$parse.queryParams;\n\n      var token = queryParams.token;\n      dispatch(setToken({\n        token: token\n      }));\n    });\n    return Linking.removeEventListener(\"url\", function () {\n      return console.log(\"we done\");\n    });\n  }, []);\n\n  var handleUpdateName = function handleUpdateName(input) {\n    setInput(input);\n  };\n\n  var handleSignIn = function handleSignIn() {\n    fetch(\"http://192.168.0.236:8080/api/login\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: \"tspalmat5@gmail.com\"\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (json) {\n      return console.log(json);\n    }).catch(function (error) {\n      console.log(error);\n    });\n    navigation.navigate(\"Waiting\");\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, {\n    style: {\n      fontSize: 20\n    }\n  }, \"Please Sign In\"), React.createElement(TextInput, {\n    style: styles.textInput,\n    keyboardType: \"email-address\",\n    placeholder: \"email\",\n    onChangeText: handleUpdateName\n  }), React.createElement(Button, {\n    title: \"Sign in\",\n    onPress: function onPress() {\n      return handleSignIn();\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  textInput: {\n    borderColor: \"black\",\n    borderWidth: 1,\n    margin: 10,\n    padding: 10,\n    width: \"60%\"\n  }\n});","map":{"version":3,"sources":["C:/Users/trevo/Documents/1 - Philosophy Project/philosophyapp/mobile/screens/Landing.tsx"],"names":["React","useEffect","useState","Linking","useAppDispatch","setToken","Landing","navigation","input","setInput","dispatch","addEventListener","event","parse","url","path","queryParams","token","removeEventListener","console","log","handleUpdateName","handleSignIn","fetch","method","headers","Accept","body","JSON","stringify","email","then","res","json","catch","error","navigate","styles","container","fontSize","textInput","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","borderColor","borderWidth","margin","padding","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, Text, TextInput, Button, StyleSheet } from \"react-native\";\r\nimport * as Linking from \"expo-linking\";\r\nimport axios from \"axios\";\r\nimport { useAppDispatch } from \"../app/hooks\";\r\nimport { setName, setToken } from \"../features/user/userSlice\";\r\n\r\nexport default function Landing({ navigation }) {\r\n\tconst [input, setInput] = useState(null);\r\n\tconst dispatch = useAppDispatch();\r\n\r\n\tuseEffect(() => {\r\n\t\tLinking.addEventListener(\"url\", (event) => {\r\n\t\t\tconst { path, queryParams } = Linking.parse(event.url);\r\n\t\t\tconst token = queryParams.token as string;\r\n\t\t\tdispatch(setToken({ token }));\r\n\t\t});\r\n\t\treturn Linking.removeEventListener(\"url\", () => console.log(\"we done\"));\r\n\t}, []);\r\n\r\n\tconst handleUpdateName = (input) => {\r\n\t\tsetInput(input);\r\n\t};\r\n\r\n\tconst handleSignIn = () => {\r\n\t\t// let redirectURL = Linking.createURL(\"/?\");\r\n\t\t// console.log(redirectURL);\r\n\t\t// console.log(\"Press\");\r\n\t\tfetch(\"http://192.168.0.236:8080/api/login\", {\r\n\t\t\tmethod: \"POST\",\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: \"application/json\",\r\n\t\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\temail: \"tspalmat5@gmail.com\",\r\n\t\t\t}),\r\n\t\t})\r\n\t\t\t.then((res) => res.json())\r\n\t\t\t.then((json) => console.log(json))\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t});\r\n\t\tnavigation.navigate(\"Waiting\");\r\n\t\t// dispatch(setName({ name: input }));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<View style={styles.container}>\r\n\t\t\t<Text style={{ fontSize: 20 }}>Please Sign In</Text>\r\n\t\t\t<TextInput\r\n\t\t\t\tstyle={styles.textInput}\r\n\t\t\t\tkeyboardType='email-address'\r\n\t\t\t\tplaceholder='email'\r\n\t\t\t\tonChangeText={handleUpdateName}\r\n\t\t\t/>\r\n\t\t\t<Button title='Sign in' onPress={() => handleSignIn()} />\r\n\t\t</View>\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\tbackgroundColor: \"#fff\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t},\r\n\ttextInput: {\r\n\t\tborderColor: \"black\",\r\n\t\tborderWidth: 1,\r\n\t\tmargin: 10,\r\n\t\tpadding: 10,\r\n\t\twidth: \"60%\",\r\n\t},\r\n});\r\n"]},"metadata":{},"sourceType":"module"}