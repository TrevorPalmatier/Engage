{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { useSignupMutation } from \"../app/services/engage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction Register(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      password = _useState8[0],\n      setPassword = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      repassword = _useState10[0],\n      setRepassword = _useState10[1];\n\n  var _useSignupMutation = useSignupMutation(),\n      _useSignupMutation2 = _slicedToArray(_useSignupMutation, 2),\n      signup = _useSignupMutation2[0],\n      isLoading = _useSignupMutation2[1].isLoading;\n\n  var onSignUp = function onSignUp() {\n    var payload = {\n      email: email,\n      password: password,\n      repassword: repassword\n    };\n    signup(payload).unwrap().then(function () {\n      Alert.alert(\"Success\", \"User has been registered. Please Log-in.\");\n      navigation.replace(\"Login\");\n    }).catch(function (err) {\n      console.log(err);\n      setError(err.data.message);\n    });\n  };\n\n  return _jsx(KeyboardAwareScrollView, {\n    bounces: false,\n    contentContainerStyle: styles.main,\n    showsVerticalScrollIndicator: false,\n    resetScrollToCoords: {\n      x: 0,\n      y: 0\n    },\n    extraScrollHeight: 20,\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        keyboardType: \"email-address\",\n        placeholder: \"email\",\n        placeholderTextColor: \"#a6a6a6\",\n        onChangeText: function onChangeText(email) {\n          return setEmail(email);\n        }\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"password\",\n        placeholderTextColor: \"#a6a6a6\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(pw) {\n          return setPassword(pw);\n        }\n      }), _jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"re-enter password\",\n        placeholderTextColor: \"#a6a6a6\",\n        secureTextEntry: true,\n        onChangeText: function onChangeText(pw) {\n          return setRepassword(pw);\n        }\n      }), _jsx(View, {\n        style: error ? styles.errorBox : styles.blank,\n        children: _jsx(Text, {\n          style: styles.errorText,\n          children: error\n        })\n      }), _jsx(Pressable, {\n        style: styles.button,\n        onPress: function onPress() {\n          onSignUp();\n        },\n        children: _jsx(Text, {\n          style: {\n            color: \"white\"\n          },\n          children: \"Register\"\n        })\n      })]\n    })\n  });\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    width: \"100%\",\n    alignItems: \"center\"\n  },\n  container: {\n    width: \"100%\",\n    paddingTop: 50,\n    alignItems: \"center\"\n  },\n  input: {\n    width: \"80%\",\n    padding: 10,\n    margin: 10,\n    borderWidth: 1,\n    borderColor: \"black\",\n    color: \"black\"\n  },\n  button: {\n    margin: 15,\n    padding: 5,\n    height: 50,\n    width: \"60%\",\n    backgroundColor: \"#33BBFF\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 5\n  },\n  errorBox: {\n    backgroundColor: \"#FF8080\",\n    width: \"80%\",\n    height: 70,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: 5\n  },\n  errorText: {\n    color: \"white\",\n    fontSize: 15\n  },\n  blank: {}\n});\nexport default Register;","map":{"version":3,"sources":["C:/Users/trevo/Documents/1 - Philosophy Project/philosophyapp/mobile/screens/Register.tsx"],"names":["React","useState","KeyboardAwareScrollView","useSignupMutation","Register","navigation","loading","setLoading","error","setError","email","setEmail","password","setPassword","repassword","setRepassword","signup","isLoading","onSignUp","payload","unwrap","then","Alert","alert","replace","catch","err","console","log","data","message","styles","main","x","y","container","input","pw","errorBox","blank","errorText","button","color","StyleSheet","create","width","alignItems","paddingTop","padding","margin","borderWidth","borderColor","height","backgroundColor","justifyContent","borderRadius","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { TextInput, View, StyleSheet, Alert, Text, Pressable } from \"react-native\";\r\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\r\nimport { SignupRequest, useSignupMutation } from \"../app/services/engage\";\r\n\r\nfunction Register({ navigation }) {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [error, setError] = useState(\"\");\r\n\tconst [email, setEmail] = useState(\"\");\r\n\tconst [password, setPassword] = useState(\"\");\r\n\tconst [repassword, setRepassword] = useState(\"\");\r\n\tconst [signup, { isLoading }] = useSignupMutation();\r\n\r\n\tconst onSignUp = () => {\r\n\t\tconst payload = {\r\n\t\t\temail,\r\n\t\t\tpassword,\r\n\t\t\trepassword,\r\n\t\t} as SignupRequest;\r\n\t\tsignup(payload)\r\n\t\t\t.unwrap()\r\n\t\t\t.then(() => {\r\n\t\t\t\tAlert.alert(\"Success\", \"User has been registered. Please Log-in.\");\r\n\t\t\t\tnavigation.replace(\"Login\");\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t\tsetError(err.data.message);\r\n\t\t\t});\r\n\t};\r\n\r\n\treturn (\r\n\t\t<KeyboardAwareScrollView\r\n\t\t\t// keyboardDismissMode='on-drag'\r\n\t\t\tbounces={false}\r\n\t\t\tcontentContainerStyle={styles.main}\r\n\t\t\tshowsVerticalScrollIndicator={false}\r\n\t\t\tresetScrollToCoords={{ x: 0, y: 0 }}\r\n\t\t\textraScrollHeight={20}>\r\n\t\t\t<View style={styles.container}>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={styles.input}\r\n\t\t\t\t\tkeyboardType='email-address'\r\n\t\t\t\t\tplaceholder='email'\r\n\t\t\t\t\tplaceholderTextColor='#a6a6a6'\r\n\t\t\t\t\tonChangeText={(email) => setEmail(email)}\r\n\t\t\t\t/>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={styles.input}\r\n\t\t\t\t\tplaceholder='password'\r\n\t\t\t\t\tplaceholderTextColor='#a6a6a6'\r\n\t\t\t\t\tsecureTextEntry={true}\r\n\t\t\t\t\tonChangeText={(pw) => setPassword(pw)}\r\n\t\t\t\t/>\r\n\t\t\t\t<TextInput\r\n\t\t\t\t\tstyle={styles.input}\r\n\t\t\t\t\tplaceholder='re-enter password'\r\n\t\t\t\t\tplaceholderTextColor='#a6a6a6'\r\n\t\t\t\t\tsecureTextEntry={true}\r\n\t\t\t\t\tonChangeText={(pw) => setRepassword(pw)}\r\n\t\t\t\t/>\r\n\t\t\t\t<View style={error ? styles.errorBox : styles.blank}>\r\n\t\t\t\t\t<Text style={styles.errorText}>{error}</Text>\r\n\t\t\t\t</View>\r\n\t\t\t\t<Pressable\r\n\t\t\t\t\tstyle={styles.button}\r\n\t\t\t\t\tonPress={() => {\r\n\t\t\t\t\t\tonSignUp();\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t<Text style={{ color: \"white\" }}>Register</Text>\r\n\t\t\t\t</Pressable>\r\n\t\t\t</View>\r\n\t\t</KeyboardAwareScrollView>\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tmain: {\r\n\t\twidth: \"100%\",\r\n\t\talignItems: \"center\",\r\n\t},\r\n\tcontainer: {\r\n\t\twidth: \"100%\",\r\n\t\tpaddingTop: 50,\r\n\t\talignItems: \"center\",\r\n\t},\r\n\tinput: {\r\n\t\twidth: \"80%\",\r\n\t\tpadding: 10,\r\n\t\tmargin: 10,\r\n\t\tborderWidth: 1,\r\n\t\tborderColor: \"black\",\r\n\t\tcolor: \"black\",\r\n\t},\r\n\tbutton: {\r\n\t\tmargin: 15,\r\n\t\tpadding: 5,\r\n\t\theight: 50,\r\n\t\twidth: \"60%\",\r\n\t\tbackgroundColor: \"#33BBFF\",\r\n\t\talignItems: \"center\",\r\n\t\tjustifyContent: \"center\",\r\n\t\tborderRadius: 5,\r\n\t},\r\n\terrorBox: {\r\n\t\tbackgroundColor: \"#FF8080\",\r\n\t\twidth: \"80%\",\r\n\t\theight: 70,\r\n\t\tjustifyContent: \"center\",\r\n\t\talignItems: \"center\",\r\n\t\tpadding: 5,\r\n\t},\r\n\terrorText: {\r\n\t\tcolor: \"white\",\r\n\t\tfontSize: 15,\r\n\t},\r\n\tblank: {},\r\n});\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}