{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport var api = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: \" https://ancient-ridge-25388.herokuapp.com/\",\n    prepareHeaders: function prepareHeaders(headers, _ref) {\n      var getState = _ref.getState;\n      var token = getState().auth.token;\n\n      if (token) {\n        headers.set(\"authorization\", \"Bearer \" + token);\n      }\n\n      return headers;\n    }\n  }),\n  endpoints: function endpoints(builder) {\n    return {\n      login: builder.mutation({\n        query: function query(credentials) {\n          return {\n            url: \"login\",\n            method: \"POST\",\n            body: credentials\n          };\n        }\n      }),\n      signup: builder.mutation({\n        query: function query(payload) {\n          return {\n            url: \"signup\",\n            method: \"POST\",\n            body: payload\n          };\n        }\n      }),\n      protected: builder.mutation({\n        query: function query() {\n          return \"protected\";\n        }\n      })\n    };\n  }\n});\nvar useLoginMutation = api.useLoginMutation,\n    useSignupMutation = api.useSignupMutation,\n    useProtectedMutation = api.useProtectedMutation;\nexport { useLoginMutation, useSignupMutation, useProtectedMutation };","map":{"version":3,"sources":["C:/Users/kaley/Desktop/philosophyapp/mobile/app/services/auth.ts"],"names":["createApi","fetchBaseQuery","api","baseQuery","baseUrl","prepareHeaders","headers","getState","token","auth","set","endpoints","builder","login","mutation","query","credentials","url","method","body","signup","payload","protected","useLoginMutation","useSignupMutation","useProtectedMutation"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AA2BA,OAAO,IAAMC,GAAG,GAAGF,SAAS,CAAC;AAC5BG,EAAAA,SAAS,EAAEF,cAAc,CAAC;AACzBG,IAAAA,OAAO,EAAE,6CADgB;AAEzBC,IAAAA,cAAc,EAAE,wBAACC,OAAD,QAA2B;AAAA,UAAfC,QAAe,QAAfA,QAAe;AAE1C,UAAMC,KAAK,GAAID,QAAQ,EAAT,CAA0BE,IAA1B,CAA+BD,KAA7C;;AACA,UAAIA,KAAJ,EAAW;AACVF,QAAAA,OAAO,CAACI,GAAR,CAAY,eAAZ,cAAuCF,KAAvC;AACA;;AACD,aAAOF,OAAP;AACA;AATwB,GAAD,CADG;AAY5BK,EAAAA,SAAS,EAAE,mBAACC,OAAD;AAAA,WAAc;AACxBC,MAAAA,KAAK,EAAED,OAAO,CAACE,QAAR,CAA6C;AACnDC,QAAAA,KAAK,EAAE,eAACC,WAAD;AAAA,iBAAkB;AACxBC,YAAAA,GAAG,EAAE,OADmB;AAExBC,YAAAA,MAAM,EAAE,MAFgB;AAGxBC,YAAAA,IAAI,EAAEH;AAHkB,WAAlB;AAAA;AAD4C,OAA7C,CADiB;AAQxBI,MAAAA,MAAM,EAAER,OAAO,CAACE,QAAR,CAA8C;AACrDC,QAAAA,KAAK,EAAE,eAACM,OAAD;AAAA,iBAAc;AACpBJ,YAAAA,GAAG,EAAE,QADe;AAEpBC,YAAAA,MAAM,EAAE,MAFY;AAGpBC,YAAAA,IAAI,EAAEE;AAHc,WAAd;AAAA;AAD8C,OAA9C,CARgB;AAexBC,MAAAA,SAAS,EAAEV,OAAO,CAACE,QAAR,CAA4C;AACtDC,QAAAA,KAAK,EAAE;AAAA,iBAAM,WAAN;AAAA;AAD+C,OAA5C;AAfa,KAAd;AAAA;AAZiB,CAAD,CAArB;AAiCA,IAAQQ,gBAAR,GAAsErB,GAAtE,CAAQqB,gBAAR;AAAA,IAA0BC,iBAA1B,GAAsEtB,GAAtE,CAA0BsB,iBAA1B;AAAA,IAA6CC,oBAA7C,GAAsEvB,GAAtE,CAA6CuB,oBAA7C","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport interface User {\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\tid: number;\r\n\temail: string;\r\n}\r\n\r\nexport interface UserResponse {\r\n\tuser: User;\r\n\ttoken: string;\r\n}\r\n\r\nexport interface LoginRequest {\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport interface SignupRequest {\r\n\tfirstName: string;\r\n\tlastName: string;\r\n\temail: string;\r\n\tpassword: string;\r\n}\r\n\r\nexport const api = createApi({\r\n\tbaseQuery: fetchBaseQuery({\r\n\t\tbaseUrl: \" https://ancient-ridge-25388.herokuapp.com/\",\r\n\t\tprepareHeaders: (headers, { getState }) => {\r\n\t\t\t// By default, if we have a token in the store, let's use that for authenticated requests\r\n\t\t\tconst token = (getState() as RootState).auth.token;\r\n\t\t\tif (token) {\r\n\t\t\t\theaders.set(\"authorization\", `Bearer ${token}`);\r\n\t\t\t}\r\n\t\t\treturn headers;\r\n\t\t},\r\n\t}),\r\n\tendpoints: (builder) => ({\r\n\t\tlogin: builder.mutation<UserResponse, LoginRequest>({\r\n\t\t\tquery: (credentials) => ({\r\n\t\t\t\turl: \"login\",\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tbody: credentials,\r\n\t\t\t}),\r\n\t\t}),\r\n\t\tsignup: builder.mutation<UserResponse, SignupRequest>({\r\n\t\t\tquery: (payload) => ({\r\n\t\t\t\turl: \"signup\",\r\n\t\t\t\tmethod: \"POST\",\r\n\t\t\t\tbody: payload,\r\n\t\t\t}),\r\n\t\t}),\r\n\t\tprotected: builder.mutation<{ message: string }, void>({\r\n\t\t\tquery: () => \"protected\",\r\n\t\t}),\r\n\t}),\r\n});\r\n\r\nexport const { useLoginMutation, useSignupMutation, useProtectedMutation } = api;\r\n"]},"metadata":{},"sourceType":"module"}